---

# Install WireGuard
- name: For WireGuard config we will use net interface
  debug:
    msg:
      - "We will use network interface: {{ internet_iface }}-{{ ansible_default_ipv4.address }}"
      - "We will use network port: {{ wg_port }}"
      - "WG Subnet will be:  {{ adress_subnet }}"
      - "Server  subnet ip will be : {{ adress_srv }}"
      - "Peer subnet ip will be : {{ adress_peer }}"

- name: Install WireGuard and resolvconf [REMOTE SERVER]
  become: true
  apt:
    name: "{{ base_packages_ubuntu }}"
    state: present
  tags:
    - install_wireguard

### Remove old configs #####
- name: Check current state of service
  systemd:
    name: wg-quick@wg0.service
  register: status_wg_quick
  when: not ansible_check_mode

- name: Make sure that service WG is stopped [REMOTE SERVER]
  systemd:
    name: wg-quick@wg0.service
    state: stopped
  when:
    - not ansible_check_mode
    - status_wg_quick.status.ActiveState == "active"

- name: Search old configs [REMOTE SERVER]
  find:
    path: /etc/wireguard
    file_type: any
  register: old_conf

- name: Delete old configs [REMOTE SERVER]
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ old_conf.files }}"

- name: Check if old local configs are present [LOCAL]
  stat:
    path: /etc/wireguard
  register: old_conf_exist
  when:
    - not ansible_check_mode

- name: Removing old local conffis [LOCAL]
  when:
    - not ansible_check_mode
    - old_conf_exist.stat.exists
  block:
    - name: Search old configs [LOCAL]
      find:
        path: /etc/wireguard
        file_type: any
      register: old_conf_loc
      delegate_to: 127.0.0.1

    - name: Delete old configs [LOCAL]
      file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ old_conf_loc.files }}"
      delegate_to: 127.0.0.1

##### Generating  server keys #####
- name: Generate WireGuard private server key [REMOTE SERVER]
  command: wg genkey
  register: out_pvkey_server
  changed_when: out_pvkey_server.rc != 2

- name: Save private key [REMOTE SERVER]
  lineinfile:
    path: /etc/wireguard/private.key
    line: "{{ out_pvkey_server.stdout }}"
    create: true
    mode: "0640"

- name: Change permission for key [REMOTE SERVER]
  file:
    path: /etc/wireguard/private.key
    owner: root
    group: root
    mode: '0600'
  when:
    - not ansible_check_mode

- name: Generate WireGuard public server key [REMOTE SERVER]
  shell: 'set -o pipefail && echo "{{ out_pvkey_server.stdout }}" | wg pubkey'
  register: out_pubkey_server
  changed_when: out_pubkey_server.rc != 2
  when:
    - not ansible_check_mode

- name: Save pubkey key
  lineinfile:
    path: /etc/wireguard/public.key
    line: "{{ out_pubkey_server.stdout }}"
    create: true
    mode: "0640"
  when:
    - not ansible_check_mode

- name: Read private server key [REMOTE SERVER]
  slurp:
    src: /etc/wireguard/private.key
  register: pv_key_server_enc
  when:
    - not ansible_check_mode

- name: Read pub server key [REMOTE SERVER]
  slurp:
    src: /etc/wireguard/public.key
  register: pub_key_server_enc
  when:
    - not ansible_check_mode

- name: Decode private server key
  set_fact:
    pv_key: "{{ pv_key_server_enc.content | b64decode }}"
  when:
    - not ansible_check_mode

- name: Decode pub server key
  set_fact:
    pub_key: "{{ pub_key_server_enc.content | b64decode }}"
  when:
    - not ansible_check_mode

### Generate local peer keys #####
- name: Generate WireGuard private peer key [LOCAL]
  command: wg genkey
  delegate_to: 127.0.0.1
  register: out_pvkey_local
  changed_when: out_pvkey_local.rc != 2
  tags:
    - local_peer

- name: Generate WireGuard public server key [LOCAL]
  become: true
  shell: set -o pipefail && echo "{{ out_pvkey_local.stdout }}"| wg pubkey
  delegate_to: 127.0.0.1
  register: out_pubkey_local
  changed_when: out_pubkey_local.rc != 2
  tags:
    - local_peer
  when:
    - not ansible_check_mode

- name: Save pubkey key [LOCAL]
  become: true
  become_user: root
  lineinfile:
    path: /etc/wireguard/public.key
    line: "{{ out_pubkey_local.stdout }}"
    create: true
    mode: "0640"
  delegate_to: 127.0.0.1
  when:
    - not ansible_check_mode

- name: Read local peer pub key [LOCAL]
  set_fact:
    pub_peer_key: "{{ out_pubkey_local.stdout }}"
  when:
    - not ansible_check_mode

#### Render configs #####
- name: Create WireGuard  server config file [REMOTE SERVER]
  template:
    src: wg0.conf.j2
    dest: /etc/wireguard/wg0.conf
    owner: root
    mode: '0600'
  tags:
    - config
  when:
    - not ansible_check_mode

- name: Create WireGuard  peer config file [LOCAL]
  template:
    src: wg_peer.j2
    dest: ./wg_peer.conf
    mode: "0640"
  delegate_to: 127.0.0.1
  register: local_conf_path
  tags:
    - config
  when:
    - not ansible_check_mode

- name: Adjust sysctl.config [REMOTE SERVER]
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: true
    state: present
    reload: true
  tags:
    - config

- name: Enable masquerading PART1 [REMOTE SERVER]
  lineinfile:
    path: /etc/default/ufw
    regexp: "DEFAULT_FORWARD_POLICY"
    line: 'DEFAULT_FORWARD_POLICY="ACCEPT"'
  notify:
    - Reload UFW

- name: Enable masquerading PART2 [REMOTE SERVER]
  blockinfile:
    path: /etc/ufw/before.rules
    insertafter: EOF
    block: |
      # NAT
      *nat
      -F
      :POSTROUTING ACCEPT [0:0]
      -A POSTROUTING -s {{ adress_subnet }} -o {{ internet_iface }} -j MASQUERADE
      COMMIT

#### Setup UFW #####
- name: Allow ports [REMOTE SERVER]
  community.general.ufw:
    rule: allow
    port: "{{ item }}"
  loop:
    - 22
    - "{{ wg_port }}"
    - 53
    - 80
    - 443
  tags:
    - config

- name: Enable Deny policy and enable UFW [REMOTE SERVER]
  community.general.ufw:
    state: enabled
    policy: deny
    logging: 'on'
  tags:
    - config

- name: Enable WireGuard
  systemd:
    name: wg-quick@wg0.service
    enabled: true
  tags:
    - config
  when:
    - not ansible_check_mode

- name: Reload Daemon
  systemd:
    daemon_reload: true

- name: Start WG
  systemd:
    name: wg-quick@wg0.service
    state: started
  when:
    - not ansible_check_mode

- name: Activating peer on the server side [REMOTE SERVER]
  command: sudo wg set wg0 peer "{{ pub_peer_key }}" allowed-ips "{{ adress_peer }}"
  register: activate_peer
  changed_when: activate_peer.rc != 2
  tags:
    - config
  when:
    - not ansible_check_mode

- name: Path to local config
  debug:
    msg: "{{ local_conf_path.dest }}"
  when:
    - not ansible_check_mode
